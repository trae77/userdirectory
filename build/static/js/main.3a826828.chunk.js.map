{"version":3,"sources":["components/EmployeeTable.jsx","components/SearchForm.jsx","App.js","reportWebVitals.js","index.js"],"names":["EmployeeTable","props","style","width","onClick","sortByName","employeeArrayFiltered","map","each","index","src","picture","thumbnail","alt","name","first","last","email","cell","SearchForm","onSubmit","handleSubmit","type","onChange","handleNameSearch","App","useState","employeeArray","setEmployeeArray","setEmployeeArrayFiltered","useEffect","fetch","then","response","json","fetchData","results","e","preventDefault","smallerArray","filter","toLowerCase","includes","target","value","sortArray","sort","a","b","console","log","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAsCeA,MAtCf,SAAuBC,GACnB,OACI,mCACI,wBAAOC,MAAO,CAAEC,MAAO,QAAvB,UACI,gCACI,+BACI,yCACA,6CACI,wBAAQC,QAASH,EAAMI,WAAvB,qBAEJ,2CACA,uCACA,iDAGPJ,EAAMK,sBAAsBC,KAAI,SAACC,EAAMC,GACpC,OACI,gCACI,+BACI,6BACI,qBACIC,IAAKF,EAAKG,QAAQC,UAClBC,IAAK,4BAGb,6BAAKL,EAAKM,KAAKC,QACf,6BAAKP,EAAKM,KAAKE,OACf,6BAAKR,EAAKS,QACV,6BAAKT,EAAKU,WAXNT,YCLrBU,MAVf,SAAoBlB,GAChB,OACI,mCACI,sBAAMmB,SAAUnB,EAAMoB,aAAtB,SACI,uBAAOC,KAAK,OAAOC,SAAUtB,EAAMuB,wBCqDpCC,MArDf,WACE,MAA0CC,mBAAS,IAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAA0DF,mBAAS,IAAnE,mBAAOpB,EAAP,KAA8BuB,EAA9B,KAiCA,OAhCAC,qBAAU,WACRC,MAAM,yCACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLP,EAAiBO,EAAUC,SAC3BP,EAAyBM,EAAUC,cAEtC,IA0BD,qCACE,wDAEE,6KAEF,cAAC,EAAD,CACEf,aAtBe,SAACgB,GACpBA,EAAEC,kBAsBEd,iBAnBmB,SAACa,GAExB,IAAIE,EAAeZ,EAAca,QAAO,SAAChC,GACvC,OACEA,EAAKM,KAAKC,MAAM0B,cAAcC,SAASL,EAAEM,OAAOC,MAAMH,gBACtDjC,EAAKM,KAAKE,KAAKyB,cAAcC,SAASL,EAAEM,OAAOC,MAAMH,kBAGzDZ,EAAyBU,MAavB,cAAC,EAAD,CACElC,WAlCa,WACjB,IAAIwC,EAAYlB,EAAcmB,MAAK,SAACC,EAAGC,GACrC,OAAOD,EAAEjC,KAAKC,MAAQiC,EAAElC,KAAKC,MAAQ,GAAK,KAE5Ca,EAAiB,YAAIiB,IACrBI,QAAQC,IAAIvB,IA8BRrB,sBAAuBA,QCzChB6C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.3a826828.chunk.js","sourcesContent":["function EmployeeTable(props) {\r\n    return (\r\n        <>\r\n            <table style={{ width: \"100%\" }}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Picture</th>\r\n                        <th> First name\r\n                            <button onClick={props.sortByName}>sort</button>\r\n                            </th>\r\n                        <th>Last name</th>\r\n                        <th>Email</th>\r\n                        <th>Cell Phone</th>\r\n                    </tr>\r\n                </thead>\r\n                {props.employeeArrayFiltered.map((each, index) => {\r\n                    return (\r\n                        <tbody key={index}>\r\n                            <tr>\r\n                                <td>\r\n                                    <img\r\n                                        src={each.picture.thumbnail}\r\n                                        alt={\"thumbnail of employee\"}\r\n                                    />\r\n                                </td>\r\n                                <td>{each.name.first}</td>\r\n                                <td>{each.name.last}</td>\r\n                                <td>{each.email}</td>\r\n                                <td>{each.cell}</td>\r\n                            </tr>\r\n                        </tbody>\r\n                    );\r\n                })}\r\n            </table>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default EmployeeTable;\r\n","\r\n\r\nfunction SearchForm(props) {\r\n    return (\r\n        <>\r\n            <form onSubmit={props.handleSubmit}>\r\n                <input type=\"text\" onChange={props.handleNameSearch} />\r\n            </form>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SearchForm;\r\n","import \"./App.css\";\r\nimport { useEffect, useState } from \"react\";\r\nimport React from \"react\";\r\nimport EmployeeTable from \"./components/EmployeeTable\";\r\nimport SearchForm from \"./components/SearchForm\";\r\n\r\nfunction App() {\r\n  const [employeeArray, setEmployeeArray] = useState([]);\r\n  const [employeeArrayFiltered, setEmployeeArrayFiltered] = useState([]);\r\n  useEffect(() => {\r\n    fetch(\"https://randomuser.me/api/?results=30\")\r\n      .then((response) => response.json())\r\n      .then((fetchData) => {\r\n        setEmployeeArray(fetchData.results);\r\n        setEmployeeArrayFiltered(fetchData.results);\r\n      });\r\n  }, []);\r\n\r\n  const sortByName = () => {\r\n    let sortArray = employeeArray.sort((a, b) => {\r\n      return a.name.first > b.name.first ? 1 : -1;\r\n    });\r\n    setEmployeeArray([...sortArray]);\r\n    console.log(employeeArray);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  const handleNameSearch = (e) => {\r\n    //  here we filter through employee array and we use include to go through each employees name and return only employees who match users input\r\n    let smallerArray = employeeArray.filter((each) => {\r\n      return (\r\n        each.name.first.toLowerCase().includes(e.target.value.toLowerCase()) ||\r\n        each.name.last.toLowerCase().includes(e.target.value.toLowerCase())\r\n      );\r\n    });\r\n    setEmployeeArrayFiltered(smallerArray);\r\n  };\r\n\r\n  return (  \r\n    <>\r\n      <header>\r\n        Employee Directory\r\n        <p>Click on sort in the first name column to sort by Employee's First name. Type in the text box to filter by Employee's first or last name.</p>\r\n      </header>\r\n      <SearchForm\r\n        handleSubmit={handleSubmit}\r\n        handleNameSearch={handleNameSearch}\r\n      />\r\n      <EmployeeTable\r\n        sortByName={sortByName}\r\n        employeeArrayFiltered={employeeArrayFiltered}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}